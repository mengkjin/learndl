my.pf.trade.par <- function(tdate = NULL ,
                            mdate = my.pf.mdate(tdate) , 
                            tpar  = NULL ,
                            config_file = NULL , 
                            config_file_full_path = NULL ,
                            ...){
  # A typical example of trading parameter set
  if (is.null(tpar)){
    tpar <- my.pf.trade.par.config_file(config_file = config_file , 
                                        config_file_full_path = config_file_full_path ,
                                        sourcing = TRUE)
  }
  if (is.null(tpar)){
    tpar <- list()
    # Default Settings -------------------------------------------------
    # Basic ------------------------------------------------------------
    
    tpar[["tdate"]]                 <- tdate           # trade date
    tpar[["mdate"]]                 <- mdate           # model date
    if (exists("tdate") && !is.null(tdate)) tpar[["tdate"]] <- tdate
    if (exists("mdate") && !is.null(mdate)) tpar[["mdate"]] <- mdate
    tpar[["pname"]]                 <- "Default"       # portfolio name
    tpar[["value"]]                 <- 5 * 10 ^ 8      # portfolio size initially
    tpar[["initial_portfolio"]]     <- "empty"         # old portfolio
    tpar[["benchmark"]]             <- c(market = 0 , 
                                         CSI50  = 0 ,
                                         CSI300 = 0 ,
                                         CSI500 = 0 ,
                                         CSI800 = 1)   # benchmark portfolio
    tpar[["benchmark_performance"]] <- NULL            # benchmark portfolio of performance
    tpar[["benchmark_alternative"]] <- NULL            # benchmark portfolio of style/sector/industry
    
    # Total Position
    tpar[["target_pos"]]            <- 1               # Target Equity Position
    tpar[["target_eq"]]             <- NULL            # Target Equity Value
    tpar[["add_pos"]]               <- NULL            # Add Equity Position
    tpar[["add_eq"]]                <- NULL            # Add Equity Value
    tpar[["short_position"]]        <- 0               # Short position upper-bound
    tpar[["short_sell_pool"]]       <- NULL            # short sell pool , if null CSI300
    
    tpar[["opt_option"]]            <- ..pf..opt_option# see header
    
    # Controls ----------------------------------------------------------------
    # Additional Controling Methods
    tpar[["controls"]]                    <- list()
    tpar[["controls"]][["liquidity"]]     <- TRUE     # requires maximum liquidation days
    tpar[["controls"]][["conceal"]]       <- TRUE     # conceal holdings behind major holders
    tpar[["controls"]][["negative"]]      <- FALSE     # limit negative stocks
    tpar[["controls"]][["pledge"]]        <- FALSE     # limit pledge stocks
    tpar[["controls"]][["pledge_method"]] <- 1     # limit pledge method
    tpar[["controls"]][["fundapool"]]     <- FALSE     # limit stock not in Js/CSI300/oef_mjr_holder Pool
    tpar[["controls"]][["jsuniverse"]]    <- FALSE     # control stock not in Js Pool
    tpar[["controls"]][["jsrp_must_overweight"]]    <- FALSE     # JS Research Portfolio stock Must Overweight
    tpar[["controls"]][["jsrp_overweight_control"]] <- FALSE     # JS Research Portfolio stock can be overweight for 1%
    tpar[["controls"]][["esg_leading"]]   <- FALSE     # control stock with low esg factor value : prohibit
    tpar[["controls"]][["esg_positive"]]  <- FALSE     # control stock with low esg factor value : no udev
    
    
    # Models ------------------------------------------------------------------
    # specification of models used
    tpar[["models"]]                <- list()
    tpar[["models"]][["amodel"]]    <- ..pf..amodel
    tpar[["models"]][["rmodel"]]    <- ..pf..rmodel
    tpar[["models"]][["tmodel"]]    <- ..pf..tmodel
    
    # Trades ------------------------------------------------------------------
    # specification of models used
    tpar[["tdlist"]]                <- list()
    tpar[["tdlist"]][["cycle"]]     <- ..pf..trade_cycle
    tpar[["tdlist"]][["seq_type"]]  <- "trade" # or calendar
    tpar[["tdlist"]][["start"]]     <- ..pf..quick_test_start_dt
    tpar[["tdlist"]][["end"]]       <- ..pf..quick_test_end_dt
    tpar[["tdlist"]][["func"]]      <- NULL
    
    # Objective ---------------------------------------------------------------
    # objective function parameters
    tpar[["obj"]]                   <- list()
    
    # objective function parameters
    tpar[["obj"]][["crisk"]]        <- 0               # common risk covariance indicator
    tpar[["obj"]][["srisk"]]        <- 1               # specific risk covariance indicator
    tpar[["obj"]][["srisk_shink"]]  <- 1               # specific risk shinkage
    tpar[["obj"]][["lambda"]]       <- 200             # risk aversion coefficient : 
    #      usually equals to target(IR) / 2 / target(sigma) 
    tpar[["obj"]][["trade_cost"]]   <- ..pf..trade_cost# trade cost coefficient
    tpar[["obj"]][["distribution_neutral"]] <- FALSE   # require size factor to distribute neutrally
    
    # Constraints --------------------------------------------------------------
    # ~~Stock Pool Constraints -----------------
    tpar[["pool"]] <- list()
    tpar[["pool"]][["basic"]]       <- NULL             # basic pool , if null estuniv
    tpar[["pool"]][["allow"]]       <- NULL             # additional basic pool , and exempted from prohibit
    tpar[["pool"]][["no_opt"]]      <- NULL             # stocks that will not be included in the optimization process
    tpar[["pool"]][["ignore"]]      <- NULL             # deal for opposite trades , similar as halt
    tpar[["pool"]][["no_sell"]]     <- NULL             # not for sell
    tpar[["pool"]][["no_buy"]]      <- NULL             # not for buy
    tpar[["pool"]][["prohibit"]]    <- NULL             # will sell if can , will not buy
    tpar[["pool"]][["illegal"]]     <- NULL             # permanent prohibit
    tpar[["pool"]][["warning"]]     <- NULL             # will buy up to 0.5%
    tpar[["pool"]][["no_ldev"]]     <- NULL             # not for under bought
    tpar[["pool"]][["no_udev"]]     <- NULL             # not for over bought
    
    # ~~Industry Pool Constraints -----------------
    tpar[["indpool"]] <- list()
    tpar[["indpool"]][["no_sell"]]     <- NULL       # not for sell
    tpar[["indpool"]][["no_buy"]]      <- NULL       # not for buy
    tpar[["indpool"]][["no_net_sell"]] <- NULL       # not for net sell
    tpar[["indpool"]][["no_net_buy"]]  <- NULL       # not for net buy
    
    # ~~Stock Attribute Limits -----------------
    tpar[["limit"]] <- list()
    tpar[["limit"]][["i_qcapallow"]]<- NULL             # for each industry , at least the largest X percent are allowed 
    tpar[["limit"]][["ffmv"]]       <- c(value = 0   , ratio = 0.1)
    tpar[["limit"]][["close"]]      <- c(value = 1   , ratio = 0.0)
    tpar[["limit"]][["amount"]]     <- c(value = 0   , ratio = 0.1)
    tpar[["limit"]][["bookvalue"]]  <- c(value = 0   , ratio = 0.1)
    tpar[["limit"]][["no_st"]]      <- TRUE             # exclude st stocks
    tpar[["limit"]][["list_days"]]  <- 63               # exclude new shares
    tpar[["limit"]][["kcb_buy"]]    <- FALSE            # will not buy kcb
    tpar[["limit"]][["kcb_sell"]]   <- FALSE            # will not sell kcb
    
    # ~~Stock Weight Restriction -----------------
    # Full Portfolio , vanilla lb,ub,ldev,udev of stocks
    tpar[["bound"]]                 <- c(lb=-0.03    ,ub=0.1   ,ldev=-0.03  ,udev=0.03   ) 
    tpar[["bound_ratio"]]           <- c(lb=-0       ,ub=Inf   )
    tpar[["bound_badalphas"]]       <- c()              # lower alpha rank_pct will be underweight to max 
    # tpar[["bound_badalphas"]]        <- c("tst@entrepreneur_score@raw" = 0.3)
    
    # General Constraints
    tpar[["constr"]] <- list()
    
    # ~~Given Bound -----------------
    # a data.frame with at least 2 columns: wind_id , lb (or) ub (or) ldev (or) udev
    # collaborate contains pool altogether weight constraints that are determined by control process
    tpar[["constr"]][["stocks_eq"]]    <- NULL
    tpar[["constr"]][["stocks_value"]] <- NULL
    tpar[["constr"]][["stocks_port"]]  <- NULL
    tpar[["constr"]][["collaborate"]]  <- NULL
    
    tpar[["constr"]][["trade_value"]]  <- NULL
    tpar[["constr"]][["trade_ratio"]]  <- NULL
    
    
    # ~~Target Tracking Error -----------------
    # Annulaized
    tpar[["constr"]][["te"]]        <- NULL
    
    # ~~Stock Exchange -----------------
    # Full Portfolio
    tpar[["constr"]][["shse"]]      <- c(lb=-Inf  ,ub=Inf   )  # SHSE minimum constraints
    tpar[["constr"]][["szse"]]      <- c(lb=-Inf  ,ub=Inf   )  # SHSE minimum constraints
    tpar[["constr"]][["kcb"]]       <- c(lb=-Inf  ,ub=Inf   )  # KCB  minimum constraints
    tpar[["constr"]][["csi+kccy"]]  <- c(lb=-Inf  ,ub=Inf   )  # KCB  minimum constraints
    
    # ~~Risk Model Industry -----------------
    # Full Portfolio
    tmp                             <- list()
    # Overall Constraints , Only If No Specific Constraints 
    tmp[["overall"]]                <- c(lb=-Inf  ,ub=Inf   ,ldev=-0.02 ,udev=0.02  )
    # Specific Constraints : NA or un-specified will use overall constaints
    # tmp[["petro"]]                  <- c(lb=-Inf  ,ub=Inf   ,ldev=-Inf  ,udev=Inf   )
    tpar[["constr"]][["indus"]]     <- tmp
    tpar[["constr"]][["indus_not_extend"]] <- FALSE
    
    # ~~Risk Model Sector -----------------
    # Full Portfolio
    tmp                             <- list()
    # Overall Constraints , Only If No Specific Constraints 
    tmp[["overall"]]                <- c(lb=-Inf  ,ub=Inf   ,ldev=-0.03 ,udev=0.03  )
    # Specific Constraints : NA or un-specified will use overall constaints
    # tmp[["manufacture"]]            <- c(lb=-Inf  ,ub=Inf   ,ldev=NA    ,udev=NA    )
    # tmp[["cyclical"]]               <- c(lb=-NA   ,ub=Inf   ,ldev=NA    ,udev=NA    )
    tpar[["constr"]][["sector"]]    <- tmp
    
    # ~~Risk Model Style -----------------
    # Full Portfolio
    tmp                             <- list()
    # Overall Constraints , Only If No Specific Constraints 
    tmp[["overall"]]                <- c(lb=NA    ,ub=NA    ,ldev=-0.3  ,udev=0.3   )
    # Specific Constraints
    #      NA : use overall constaints
    # tmp[["size"]]                   <- c(lb=NA    ,ub=NA    ,ldev=-0.1  ,udev=0.1   )
    # tmp[["beta"]]                   <- c(lb=NA    ,ub=NA    ,ldev=-0.1  ,udev=0.1   )
    # tmp[["momentum"]]               <- c(lb=NA    ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["residual_volatility"]]    <- c(lb=NA    ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["non_linear_size"]]        <- c(lb=NA    ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["book_to_price"]]          <- c(lb=NA    ,ub=NA    ,ldev=-0.1  ,udev=0.1   )
    # tmp[["liquidity"]]              <- c(lb=NA    ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["earnings_yield"]]         <- c(lb=NA    ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["growth"]]                 <- c(lb=NA    ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["leverage"]]               <- c(lb=NA    ,ub=NA    ,ldev=NA    ,udev=NA    )
    tpar[["constr"]][["style"]]     <- tmp
    
    # ~~Alpha Model SubAlpha -----------------
    # Full Portfolio
    tmp                             <- list()
    # Overall Constraints , Only If No Specific Constraints 
    tmp[["overall"]]                <- c(lb= NA   ,ub=NA    ,ldev=-3.5  ,udev=3.5   )
    # Specific Constraints
    # tmp[["value"]]                  <- c(lb= NA   ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["trend"]]                  <- c(lb= NA   ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["quality"]]                <- c(lb= NA   ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["analyst"]]                <- c(lb= NA   ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["strength"]]               <- c(lb= NA   ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["volume"]]                 <- c(lb= NA   ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["correlation"]]            <- c(lb= NA   ,ub=NA    ,ldev=NA    ,udev=NA    )
    # tmp[["sentiment"]]              <- c(lb= NA   ,ub=NA    ,ldev=NA    ,udev=NA    )
    tpar[["constr"]][["subaf"]]     <- tmp
    
    # ~~Beta To Benchmark -----------------
    # Calculate Using Covariance Matrix , Full Portfolio
    tpar[["constr"]][["bbeta"]]     <- c(lb=-Inf,ub=Inf)
    
    # ~~Benchmark Component -----------------
    # Full Portfolio
    tpar[["constr"]][["component"]] <- c(lb=0.8,ub = Inf) 
    
    # ~~Benchmark Size Deviation -----------------
    # Calculate Using Covariance Matrix , Full Portfolio
    tpar[["constr"]][["bsizedev"]]  <- c(lb=-Inf,ub=0.3)
    tpar[["constr"]][["bsizedev2"]] <- c(lb=-Inf,ub=0.6)
    
    # ~~Third Party Industry -----------------
    # Full Portfolio
    tpar[["constr"]][["sw_level_1"]] <- NULL # c(lb=-Inf  ,ub=Inf   ,ldev=-Inf ,udev=Inf  )
    tpar[["constr"]][["zx_level_1"]] <- NULL # c(lb=-Inf  ,ub=Inf   ,ldev=-Inf ,udev=Inf  )
    
    # ~~Special Industry -----------------
    # (Stock Pool Functions) Constraints
    tmp                             <- list()
    tmp$pool                        <- c("insurance")
    tmp$value                       <- list(insurance = c(lb=-Inf  ,ub=Inf   ,ldev=-0.01 ,udev=0.01 ))
    # tmp$pool$insurance        <- my.pf.get.sp_ind_value.insurace(mdate , "CSI800" , -0.005 , 0.005)
    # tmp$pool                          <- c("insurance" , "jsuniverse")
    # tmp$value                   <- list(insurance = c(lb=-Inf  ,ub=Inf   ,ldev=-0.005 ,udev=0.005 ) ,
    #                                     jsuniverse = c(lb=0.8  ,ub=Inf   ,ldev=-Inf   ,udev=Inf   ))
    tpar[["constr"]][["sp"]]        <- tmp
    
    # ~~Concpets -----------------
    # (Stock Pool Functions) Constraints
    tmp                             <- NULL
    # tmp                             <- list()
    # tmp$pool                        <- c(apple = "苹果")
    # tmp$value                       <- list(apple = c(lb=-Inf  ,ub=Inf   ,ldev=-0.025 ,udev=0.005 ))
    tpar[["constr"]][["concepts"]]  <- tmp
    
    # ~~Special Descriptors -----------------
    # raw discriptor from cs folder
    tmp                             <- list()
    #tmp$descriptor                  <- c(roe = "mez@roe_mrq")
    #tmp$value                       <- list(roe = c(lb=-Inf  ,ub=Inf   ,ldev=-0.005 ,udev=Inf ))
    tpar[["constr"]][["descriptor"]]<- tmp
    
    # ~~Turnover Constraints -----------------
    # Turnover Constraints , the Turnover of the Lesser Side , Full Portfolio
    tmp                             <- list()
    tmp[["single"]]                 <- 0.1                # single side (lesser side) turnover constraints
    tmp[["double"]]                 <- Inf                # double side turnover constraints
    tmp[["buy"]]                    <- Inf                # buy side turnover constraints
    tmp[["sell"]]                   <- Inf                # sell side turnover constraints
    tpar[["constr"]][["turnover"]]  <- tmp
    
    # ~~Time Dependent ----------------------------------------------------------
    tpar[["time_dependent"]]        <- function(tpar) tpar
    
    # ~~Relax Queue -------------------------------------------------------------
    tpar[["constr"]][["relax_queue"]] <- my.pf.trade.par.relax.queue()
    
  }else{
    # subset mdate and tdate if supplied
    if (!is.null(tdate)) tpar[["tdate"]] <- tdate         # trade date
    if (!is.null(mdate)) tpar[["mdate"]] <- mdate         # model date
  }
  
  tpar <- my.pf.trade.par.kwargs_match(kwarg_list = list(...) , tpar = tpar)
  tpar <- my.pf.trade.par.clear(tpar)
  tpar <- my.pf.trade.par.time_dependent(tpar)
  
  return(tpar)
}