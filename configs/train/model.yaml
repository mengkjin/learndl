# main model configs ----------------------------------------------------------------
name          : null  # any name or null
module        : tft  # any of [nn defined in src/algo/nn/api.py] or ['booster' , 'lgbm' , 'ada' , 'xgboost' , 'catboost']
submodels     : [best , swalast , swabest] # subset of ['best' , 'swalast' , 'swabest'] , but for booster , only use best
beg_date      : 20170103 # model start date
end_date      : 99991231 # model end date
interval      : 0       # model update interval in days , nn is prefered to be 120 , booster is prefered to be 20 , but is up to you
train_window  : 0       # train window in days , nn is prefered to be 2400 , booster is prefered to be 240 , but is up to you

nn_interval: 120
booster_interval: 20
nn_train_window: 2400
booster_train_window: 240

# if module is a neural network ----------------------------------------------------------------
booster_head            : null # [null , lgbm , ada , xgboost , catboost] , if not null the last layer of the nn is a booster

# if module is a booster ----------------------------------------------------------------
booster_type            : xgboost # [lgbm , ada , xgboost , catboost] , if module is Literal['booster'] , use this to specify the booster type
booster_optuna          : False # [True , False] , if True , use optuna to optimize the booster parameters
booster_optuna_n_trials : 10   # int , the number of trials for optuna

# labels specification ------------------------------------------------------------
# rtn : raw return | std : standardized return | res : risk model residual
# if module is nn , use multiloss combination of the labels
# if module is booster , only use the first label
labels: 
  - std_lag1_10 # any of [res_lag1_10, res_lag1_20, rtn_lag1_10, rtn_lag1_20, std_lag1_10, std_lag1_20]
  - rtn_lag1_10 

# input specification ----------------------------------------------------------------
input_type: data # [data , hidden , factor] , specify below

data.types: day # ['day+30m' , 30m , day , ...] , use if input_type is data
data.prenorm:   # should the day be prenormalized? recommendation : not to change
  day: {'divlast' : True  , 'histnorm' : True}

hidden.types: # list of hidden states , use if input_type is hidden
  - gru_day_V0.0.best
  - gru_day_V0.1.best

factor.types: # list of factor names , use if input_type is factor
  fundament:  [quality]
  #fundament:  [quality , growth , value , earning]
  #analyst:    [surprise , coverage , forecast , adjustment]
  #behavioral: [momentum , volatility , correlation , liquidity]
  #money_flow: [holding , trading]
  #high_frequency: [hf_momentum , hf_volatility , hf_correlation , hf_liquidity]