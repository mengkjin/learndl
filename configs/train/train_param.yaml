random_seed: null

model.name: null # gru_2head # null
model.module: risk_att_gru # hidden_aggregator # 'LSTM' # 'TRA_LSTM' # 'GeneralRNN' # patch_tst # lgbm , gru_dsize
model.types: [best , swalast , swabest]

model.booster_ensembler: false
model.booster_type: lgbm # ada , xgboost , catboost

data.hidden:
  - gru_day.0.best
  - gru_day.0.swabest

data.type: day # 'day+30m' , 30m , day
data.prenorm:
  day: {'divlast' : True  , 'histnorm' : True}
data.labels: 
  - std_lag1_10 # rtn_lag1_10 # std_lag1_10
  - rtn_lag1_10 # rtn_lag1_20 # std_lag1_20

callbacks.ResetOptimizer:     {'num_reset' : 2 , 'trigger' : 40 , 'recover_level' : 1. , 'speedup2x' : true , }
callbacks.CallbackTimer:      {}
callbacks.EarlyStoppage:      {'patience' : 20}
callbacks.ValidationConverge: {'patience' : 5 , 'eps' : 1.0e-5} 
callbacks.EarlyExitRetrain:   {'earliest' : 10 , 'max_attempt' : 4 , 'lr_multiplier':[1 , 0.1 , 10 , 0.01 , 100 , 1]}
callbacks.NanLossRetrain:     {'max_attempt' : 4}
callbacks.BatchDisplay:       {}
callbacks.StatusDisplay:      {}
#callbacks.TrainConverge:      {'patience' : 5 , 'eps' : 1.0e-5} 
#callbacks.FitConverge:        {'patience' : 5 , 'eps' : 1.0e-5}
#callbacks.CudaEmptyCache:     {'batch_interval' : 20}
callbacks.GroupReturnAnalysis:  {}
callbacks.DetailedAlphaAnalysis:  {}

train.dataloader.sample_method:   sequential # total_shuffle , sequential , both_shuffle , train_shuffle
train.dataloader.shuffle_option:  epoch # static , init , epoch
train.dataloader.train_ratio:     0.8

train.trainer.transfer:  false
train.trainer.optimizer: {'name' : 'Adam' , 'param' : {} ,}  #{'name' : 'SGD' , 'param' : {} ,}
train.trainer.scheduler: {'name' : 'cycle' , 'param' : {'base_lr': 1.0e-7 , 'step_size_up': 4} ,}  #{'name' : 'SGD' , 'param' : {} ,}
train.trainer.learn_rate: {'base' : 0.005 , 'transfer_multiplier' : {'encoder' : 0.1 , 'decoder' : 1.0, }}
train.trainer.gradient.clip_value: 10.0

train.criterion.loss:      pearson  # mse, pearson, ccc
train.criterion.score:     spearman # mse, pearson, ccc, spearman
train.criterion.penalty:   
  hidden_corr:  {'lamb' :  0.001 ,}
train.criterion.weight.fit:    'equal' # 'top'
train.criterion.weight.test:   'equal' # 'top'

train.multilosses.type: hybrid
train.multilosses.param.dwa: {'tau' : 2}
train.multilosses.param.ruw: {'phi' : null}
train.multilosses.param.ewa: {}
train.multilosses.param.gls: {}
train.multilosses.param.rws: {}
train.multilosses.param.hybrid: {'phi' : null , 'tau' : 2}

short_test:  false
beg_date:   20170103 # 20220613 # 20170103
end_date:   99991231
input_span: 2400
interval:   120
max_epoch:  200
verbosity:  2
batch_size: 10000
input_step_day: 5
skip_horizon:  20 

conditional.short_test:
  beg_date:   20170101
  end_date:   20170228 # 20170228
  input_span: 240
  max_epoch:  3
  verbosity:  10
conditional.transformer:
  callbacks.ResetOptimizer:  {'num_reset' : 1 , 'trigger' : 60 , 'recover_level' : 1. , 'speedup2x' : true , }

# environment
mem_storage: true 
allow_tf32:  true
detect_anomaly: false
precision:  float # double , bfloat16